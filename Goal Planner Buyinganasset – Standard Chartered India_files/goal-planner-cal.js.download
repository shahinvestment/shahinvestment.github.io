
var count;
        $(function () {
			
			
            $(".expectedannual #slider-range-inflation").ionRangeSlider({
                range: "min",
                value: 7,
                min: 1,
				from:7,
                max: 25,
                onChange: function () {
				  $("#inflation").val($("#irs-1 .irs-single").text());	
				 
				count = 1;
				chValue();	
				changeValue();
				
                }
            });
        
		  
		  
		  
        });
		
		
		 $(function () {
         	$(".expectedannual #slider-range-expReturn").ionRangeSlider({
                range: "min",
                value: 10,
                min: 1,
                max: 30,
				from:10,
				type: 'single',
				hasGrid: false,				
            	step: 1,
				hideFromTo: false,
                onChange: function () {
                    $("#expReturn").val($("#irs-2 .irs-single").text());
					count=2;
				   chValue();				  
                   changeValue();
                },
				
				onFinish: function () {      // callback is called on slider action is finished
				
    }
            });
         
        });
       
	   function chValue(){	
	   		
		   var getValue = $("#irs-"+count+" .single").css("left");
		   var fValue = parseInt(getValue)+10;
		  // alert(fValue);
		   $("#irs-"+count+" #activeValue").width(fValue);	  
		    
		   }	   
	   
	    function changeFrom(){
		var ch_rate = $("#inflation").val();
		var expReturn_input_value = $("#expReturn").val();
        $(".expectedannual #slider-range-expReturn").ionRangeSlider("update", {
                from: expReturn_input_value
            });
			
			$(".expectedannual #slider-range-inflation").ionRangeSlider("update", {
                from: ch_rate
            });			
			
			changeValue();
      }



           
function changeValue(){

function FV(rate, nper, pmt, pv, type) {
	var rate = ($("#inflation").val())/100;
	var nper = $("#investYear").val();
	var pmt = 0;
	var pv = -$("#goalToday").val().replace(/\,/g, '');
	var type = 0;
	$(".ch-year").text(nper);
	
    var pvif;
    var fvifa;
    pvif = Math.pow(1 + rate, nper);
    if (rate == 0) {
        fvifa = 1;
    }
    else if (rate != 0) {
        fvifa = (Math.pow(1 + rate, nper) - 1) / rate;
    }

    var fv = (-((pv * pvif) + pmt * (1.0 + rate * type) * fvifa));
	return (fv);
	
}
 var f_value = Math.round(FV());
 $("#f_value").text(intToFormat(f_value));




function pmt(rate_per_period, number_of_payments, present_value, fv, type) {
    if (rate_per_period != 0.0) {
		var rate_per_period = ($("#expReturn").val()/100)/12;
		var number_of_payments = ($("#investYear").val())*12;
		var present_value = $("#pv_value").val().replace(/\,/g, '');
		//alert(rate_per_period);
		var fv = -f_value;
		var type =1;
		
        // Interest rate exists
        var q = Math.pow(1 + rate_per_period, number_of_payments);
		//alert(-(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type))));
		//alert(type);
		var pmtValue =-(rate_per_period * (fv + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));
        return pmtValue;

    } else if (number_of_payments != 0.0) {
        // No interest rate, but number of payments exists
        return -(fv + present_value) / number_of_payments;
    }

}

var monthlyInvest = Math.round(pmt());

$("#monthlyInvest").text(intToFormat(monthlyInvest));


}





function addCommas(Num) {
	////My array
	var Number1 = Num.value;	
	var CommaSeperaterList = '3,2,2,2,2,2,2,2,2';
	var Number = Number1.replace(/\,/g, '');
	var myArray = CommaSeperaterList.split(',');
	
	var newNum = "";
	var newNum2 = "";
	var count = 0;
	if (Number.indexOf('.') != -1) { 
		////number ends with a decimal point        
		places = Number.length - Number.indexOf('.') - 1;
		if (places >= 3) { 
			////number ends with a three or more digit
			num = parseFloat(Number);
			Number = num.toFixed(2);
		}
		var a = Number.split(".");
		Number = a[0];          ////the part we will commaSeperation
		var end = '.' + a[1]    ////the decimal place we will ignore and add back later
	}
	else { var end = ""; }
	var q = 0;
	for (var k = Number.length - 1; k >= 0; k--) {
		ar = myArray[q]
	
		var oneChar = Number.charAt(k);
		if (count == ar) {
			newNum += ","
			newNum += oneChar;
			count = 1;
			q++;
			continue;
		}
		else {
			newNum += oneChar;
			count++;
		}
	}
	for (var k = newNum.length - 1; k >= 0; k--) {
		var oneChar = newNum.charAt(k);
		newNum2 += oneChar;
	}
	Num.value = newNum2 + end;
	}
	
	
	
	function intToFormat(nStr)
	{
	
	 nStr += '';
	 x = nStr.split('.');
	 x1 = x[0];
	 x2 = x.length > 1 ? '.' + x[1] : '';
	 var rgx = /(\d+)(\d{3})/;
	 var z = 0;
	 var len = String(x1).length;
	 var num = parseInt((len/2)-1);
	
	  while (rgx.test(x1))
	  {
		if(z > 0)
		{
		  x1 = x1.replace(rgx, '$1' + ',' + '$2');
		}
		else
		{
		  x1 = x1.replace(rgx, '$1' + ',' + '$2');
		  rgx = /(\d+)(\d{2})/;
		}
		z++;
		num--;
		if(num == 0)
		{
		  break;
		}
	  }
	 return x1 + x2;
	}



